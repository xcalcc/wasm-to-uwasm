//          name                           wasm_op uwasm_op ty_am              enum
/* control inst */
UWASM_OP(  "nop",                          0x00,   0x00,    TY_AM32,           UNOP                        )
UWASM_OP(  "unreach",                      0x01,   0x01,    TY_AM32,           UUNREACH                    )
UWASM_OP(  "block",                        0x02,   0x02,    TY_AM32_R,         UBLOCK                      )
UWASM_OP(  "try",                          0x06,   0x06,    TY_AM32_R,         UTRY                        )
UWASM_OP(  "catch",                        0x07,   0x07,    TY_AM32_R,         UCATCH                      )
UWASM_OP(  "throw",                        0x08,   0x08,    TY_AM32_R,         UTHROW                      )
UWASM_OP(  "jmp",                          0x0b,   0x09,    TY_AM32_R,         UJMP                        )
UWASM_OP(  "jeq",                          0x00,   0x0a,    TY_AM32_R_R,       UJEQ                        )
UWASM_OP(  "jne",                          0x00,   0x0b,    TY_AM32_R_R,       UJNE                        )
UWASM_OP(  "jlt",                          0x00,   0x0c,    TY_AM32_R_R,       UJLT                        )
UWASM_OP(  "jle",                          0x00,   0x0d,    TY_AM32_R_R,       UJLE                        )
UWASM_OP(  "jgt",                          0x00,   0x0e,    TY_AM32_R_R,       UJGT                        )
UWASM_OP(  "return",                       0x0f,   0x0f,    TY_AM32_R,         URETURN                     ) // ?
UWASM_OP(  "call_short",                   0x10,   0x10,    TY_AM32_R,         UCALL_SHORT                 ) // ?
UWASM_OP(  "call_long",                    0x10,   0x10,    TY_AM64_R_OFS,     UCALL_LONG                  ) // FIXME: duplicate opcode
UWASM_OP(  "call_indirect",                0x11,   0x11,    TY_AM32_R,         UCALL_INDIRECT              ) // ?
UWASM_OP(  "return_call",                  0x12,   0x12,    TY_AM64_R_OFS,     URETURN_CALL                ) // ?
UWASM_OP(  "return_call_indirect",         0x13,   0x13,    TY_AM64_R_OFS,     URETURN_CALL_INDIRECT       ) // ?
UWASM_OP(  "select",                       0x1b,   0x1b,    TY_AM64_R_R_R,     USELECT                     )

UWASM_OP(  "jge",                          0x00,   0x20,    TY_AM64_R_R_OFS,   UJGE                        )
UWASM_OP(  "jez",                          0x00,   0x21,    TY_AM32_R_OFS,     UJEZ                        )
UWASM_OP(  "jnz",                          0x00,   0x22,    TY_AM32_R_OFS,     UJNZ                        )
UWASM_OP(  "jlz",                          0x00,   0x23,    TY_AM32_R_OFS,     UJLZ                        )
UWASM_OP(  "jlez",                         0x00,   0x24,    TY_AM32_R_OFS,     UJLEZ                       )
UWASM_OP(  "jgz",                          0x00,   0x24,    TY_AM32_R_OFS,     UJGZ                        ) // FIXME
UWASM_OP(  "jgez",                         0x00,   0x24,    TY_AM32_R_OFS,     UJGEZ                       ) // FIXME

/* memory inst */
UWASM_OP(  "i32.load",                     0x28,   0x28,    TY_AM64_R_R_OFS,   UI32LOAD                    )
UWASM_OP(  "i64.load",                     0x29,   0x29,    TY_AM64_R_R_OFS,   UI64LOAD                    ) // opcode first bit 1?
UWASM_OP(  "f32.load",                     0x2a,   0x2a,    TY_AM64_R_R_OFS,   UF32LOAD                    )
UWASM_OP(  "f64.load",                     0x2b,   0x2b,    TY_AM64_R_R_OFS,   UF64LOAD                    )
UWASM_OP(  "i32.load8_s",                  0x2c,   0x2c,    TY_AM64_R_R_OFS,   UI32LOAD8_S                 )
UWASM_OP(  "i32.load8_u",                  0x2d,   0x2d,    TY_AM64_R_R_OFS,   UI32LOAD8_U                 )
UWASM_OP(  "i32.load16_s",                 0x2e,   0x2e,    TY_AM64_R_R_OFS,   UI32LOAD16_S                )
UWASM_OP(  "i32.load16_u",                 0x2f,   0x2f,    TY_AM64_R_R_OFS,   UI32LOAD16_U                )
UWASM_OP(  "i64.load8_s",                  0x30,   0x30,    TY_AM64_R_R_OFS,   UI64LOAD8_S                 )
UWASM_OP(  "i64.load8_u",                  0x31,   0x31,    TY_AM64_R_R_OFS,   UI64LOAD8_U                 )
UWASM_OP(  "i64.load16_s",                 0x32,   0x32,    TY_AM64_R_R_OFS,   UI64LOAD16_S                )
UWASM_OP(  "i64.load16_u",                 0x33,   0x33,    TY_AM64_R_R_OFS,   UI64LOAD16_U                )
UWASM_OP(  "i64.load32_s",                 0x34,   0x34,    TY_AM64_R_R_OFS,   UI64LOAD32_S                )
UWASM_OP(  "i64.load32_u",                 0x35,   0x35,    TY_AM64_R_R_OFS,   UI64LOAD32_U                )
UWASM_OP(  "i32.store",                    0x36,   0x36,    TY_AM64_R_R_OFS,   UI32STORE                   )
UWASM_OP(  "i64.store",                    0x37,   0x37,    TY_AM64_R_R_OFS,   UI64STORE                   )
UWASM_OP(  "f32.store",                    0x38,   0x38,    TY_AM64_R_R_OFS,   UF32STORE                   )
UWASM_OP(  "f64.store",                    0x39,   0x39,    TY_AM64_R_R_OFS,   UF64STORE                   )
UWASM_OP(  "i32.store8",                   0x3a,   0x3a,    TY_AM64_R_R_OFS,   UI32STORE8                  )
UWASM_OP(  "i32.store16",                  0x3b,   0x3b,    TY_AM64_R_R_OFS,   UI32STORE16                 )
UWASM_OP(  "i64.store8",                   0x3c,   0x3c,    TY_AM64_R_R_OFS,   UI64STORE8                  )
UWASM_OP(  "i64.store16",                  0x3d,   0x3d,    TY_AM64_R_R_OFS,   UI64STORE16                 )
UWASM_OP(  "i64.store32",                  0x3e,   0x3e,    TY_AM64_R_R_OFS,   UI64STORE32                 )
UWASM_OP(  "memory.size",                  0x3f,   0x3f,    TY_AM32_R,         UMEMORYSIZE                 )
UWASM_OP(  "memory.grow",                  0x40,   0x40,    TY_AM32_R,         UMEMORYGROW                 )

/* numeric inst */
UWASM_OP(  "i32.const",                    0x41,   0x41,    TY_AM64_R_OFS,     UI32CONST                   )
UWASM_OP(  "i64.const",                    0x42,   0x42,    TY_AM64_R_OFS,     UI64CONST                   )
UWASM_OP(  "f32.const",                    0x43,   0x43,    TY_AM64_R_OFS,     UF32CONST                   )
UWASM_OP(  "f64.const",                    0x44,   0x44,    TY_AM64_R_OFS,     UF64CONST                   )
UWASM_OP(  "i32.eqz",                      0x45,   0x45,    TY_AM64_R_OFS,     UI32EQZ                     )
UWASM_OP(  "i32.eq",                       0x46,   0x46,    TY_AM64_R_R_R,     UI32EQ                      )
UWASM_OP(  "i32.ne",                       0x47,   0x47,    TY_AM64_R_R_R,     UI32NE                      )
UWASM_OP(  "i32.lt_s",                     0x48,   0x48,    TY_AM64_R_R_R,     UI32LT_S                    )
UWASM_OP(  "i32.lt_u",                     0x49,   0x49,    TY_AM64_R_OFS,     UI32LT_U                    )
UWASM_OP(  "i32.gt_s",                     0x4a,   0x4a,    TY_AM64_R_OFS,     UI32GT_S                    )
UWASM_OP(  "i32.gt_u",                     0x4b,   0x4b,    TY_AM64_R_OFS,     UI32GT_U                    )
UWASM_OP(  "i32.le_s",                     0x4c,   0x4c,    TY_AM64_R_OFS,     UI32LE_S                    )
UWASM_OP(  "i32.le_u",                     0x4d,   0x4d,    TY_AM64_R_OFS,     UI32LE_U                    )
UWASM_OP(  "i32.ge_s",                     0x4e,   0x4e,    TY_AM64_R_OFS,     UI32GE_S                    )
UWASM_OP(  "i32.ge_u",                     0x4f,   0x4f,    TY_AM64_R_OFS,     UI32GE_U                    )
UWASM_OP(  "i64.eqz",                      0x50,   0x50,    TY_AM64_R_OFS,     UI64EQZ                     )
UWASM_OP(  "i64.eq",                       0x51,   0x51,    TY_AM64_R_OFS,     UI64EQ                      )
UWASM_OP(  "i64.ne",                       0x52,   0x52,    TY_AM64_R_OFS,     UI64NE                      )
UWASM_OP(  "i64.lt_s",                     0x53,   0x53,    TY_AM64_R_OFS,     UI64LT_S                    )
UWASM_OP(  "i64.lt_u",                     0x54,   0x54,    TY_AM64_R_OFS,     UI64LT_U                    )
UWASM_OP(  "i64.gt_s",                     0x55,   0x55,    TY_AM64_R_OFS,     UI64GT_S                    )
UWASM_OP(  "i64.gt_u",                     0x56,   0x56,    TY_AM64_R_OFS,     UI64GT_U                    )
UWASM_OP(  "i64.le_s",                     0x57,   0x57,    TY_AM64_R_OFS,     UI64LE_S                    )
UWASM_OP(  "i64.le_u",                     0x58,   0x58,    TY_AM64_R_OFS,     UI64LE_U                    )
UWASM_OP(  "i64.ge_s",                     0x59,   0x59,    TY_AM64_R_OFS,     UI64GE_S                    )
UWASM_OP(  "i64.ge_u",                     0x5a,   0x5a,    TY_AM64_R_OFS,     UI64GE_U                    )
UWASM_OP(  "f32.eq",                       0x5b,   0x5b,    TY_AM64_R_OFS,     UF32EQ                      )
UWASM_OP(  "f32.ne",                       0x5c,   0x5c,    TY_AM64_R_OFS,     UF32NE                      )
UWASM_OP(  "f32.lt",                       0x5d,   0x5d,    TY_AM64_R_OFS,     UF32LT                      )
UWASM_OP(  "f32.gt",                       0x5e,   0x5e,    TY_AM64_R_OFS,     UF32GT                      )
UWASM_OP(  "f32.le",                       0x5f,   0x5f,    TY_AM64_R_OFS,     UF32LE                      )
UWASM_OP(  "f32.ge",                       0x60,   0x60,    TY_AM64_R_OFS,     UF32GE                      )
UWASM_OP(  "f64.eq",                       0x61,   0x61,    TY_AM64_R_OFS,     UF64EQ                      )
UWASM_OP(  "f64.ne",                       0x62,   0x62,    TY_AM64_R_OFS,     UF64NE                      )
UWASM_OP(  "f64.lt",                       0x63,   0x63,    TY_AM64_R_OFS,     UF64LT                      )
UWASM_OP(  "f64.gt",                       0x64,   0x64,    TY_AM64_R_OFS,     UF64GT                      )
UWASM_OP(  "f64.le",                       0x65,   0x65,    TY_AM64_R_OFS,     UF64LE                      )
UWASM_OP(  "f64.ge",                       0x66,   0x66,    TY_AM64_R_OFS,     UF64GE                      )
UWASM_OP(  "i32.clz",                      0x67,   0x67,    TY_AM64_R_OFS,     UI32CLZ                     )
UWASM_OP(  "i32.ctz",                      0x68,   0x68,    TY_AM64_R_OFS,     UI32CTZ                     )
UWASM_OP(  "i32.popcnt",                   0x69,   0x69,    TY_AM64_R_OFS,     UI32POPCNT                  )
UWASM_OP(  "i32.add",                      0x6a,   0x6a,    TY_AM64_R_R_R,     UI32ADD                     )
UWASM_OP(  "i32.sub",                      0x6b,   0x6b,    TY_AM64_R_R_R,     UI32SUB                     )
UWASM_OP(  "i32.mul",                      0x6c,   0x6c,    TY_AM64_R_R_R,     UI32MUL                     )
UWASM_OP(  "i32.div_s",                    0x6d,   0x6d,    TY_AM64_R_R_R,     UI32DIV_S                   )
UWASM_OP(  "i32.div_u",                    0x6e,   0x6e,    TY_AM64_R_R_R,     UI32DIV_U                   )
UWASM_OP(  "i32.rem_s",                    0x6f,   0x6f,    TY_AM64_R_R_R,     UI32REM_S                   )
UWASM_OP(  "i32.rem_u",                    0x70,   0x70,    TY_AM64_R_R_R,     UI32REM_U                   )
UWASM_OP(  "i32.and",                      0x71,   0x71,    TY_AM64_R_R_R,     UI32AND                     )
UWASM_OP(  "i32.or",                       0x72,   0x72,    TY_AM64_R_R_R,     UI32OR                      )
UWASM_OP(  "i32.xor",                      0x73,   0x73,    TY_AM64_R_R_R,     UI32XOR                     )
UWASM_OP(  "i32.shl",                      0x74,   0x74,    TY_AM64_R_R_R,     UI32SHL                     )
UWASM_OP(  "i32.shr_s",                    0x75,   0x75,    TY_AM64_R_R_R,     UI32SHR_S                   )
UWASM_OP(  "i32.shr_u",                    0x76,   0x76,    TY_AM64_R_R_R,     UI32SHR_U                   )
UWASM_OP(  "i32.rotl",                     0x77,   0x77,    TY_AM64_R_R_R,     UI32ROTL                    )
UWASM_OP(  "i32.rotr",                     0x78,   0x78,    TY_AM64_R_R_R,     UI32ROTR                    )
UWASM_OP(  "i64.clz",                      0x79,   0x79,    TY_AM64_R_R_R,     UI64CLZ                     )
UWASM_OP(  "i64.ctz",                      0x7a,   0x7a,    TY_AM64_R_R_R,     UI64CTZ                     )
UWASM_OP(  "i64.popcnt",                   0x7b,   0x7b,    TY_AM64_R_R_R,     UI64POPCNT                  )
UWASM_OP(  "i64.add",                      0x7c,   0x7c,    TY_AM64_R_R_R,     UI64ADD                     )
UWASM_OP(  "i64.sub",                      0x7d,   0x7d,    TY_AM64_R_R_R,     UI64SUB                     )
UWASM_OP(  "i64.mul",                      0x7e,   0x7e,    TY_AM64_R_R_R,     UI64MUL                     )
UWASM_OP(  "i64.div_s",                    0x7f,   0x7f,    TY_AM64_R_R_R,     UI64DIV_S                   )
UWASM_OP(  "i64.div_u",                    0x80,   0x80,    TY_AM64_R_R_R,     UI64DIV_U                   )
UWASM_OP(  "i64.rem_s",                    0x81,   0x81,    TY_AM64_R_R_R,     UI64REM_S                   )
UWASM_OP(  "i64.rem_u",                    0x82,   0x82,    TY_AM64_R_R_R,     UI64REM_U                   )
UWASM_OP(  "i64.and",                      0x83,   0x83,    TY_AM64_R_R_R,     UI64AND                     )
UWASM_OP(  "i64.or",                       0x84,   0x84,    TY_AM64_R_R_R,     UI64OR                      )
UWASM_OP(  "i64.xor",                      0x85,   0x85,    TY_AM64_R_R_R,     UI64XOR                     )
UWASM_OP(  "i64.shl",                      0x86,   0x86,    TY_AM64_R_R_R,     UI64SHL                     )
UWASM_OP(  "i64.shr_s",                    0x87,   0x87,    TY_AM64_R_R_R,     UI64SHR_S                   )
UWASM_OP(  "i64.shr_u",                    0x88,   0x88,    TY_AM64_R_R_R,     UI64SHR_U                   )
UWASM_OP(  "i64.rotl",                     0x89,   0x89,    TY_AM64_R_R_R,     UI64ROTL                    )
UWASM_OP(  "i64.rotr",                     0x8a,   0x8a,    TY_AM64_R_R_R,     UI64ROTR                    )
UWASM_OP(  "f32.abs",                      0x8b,   0x8b,    TY_AM64_R_R_R,     UF32ABS                     )
UWASM_OP(  "f32.neg",                      0x8c,   0x8c,    TY_AM64_R_R_R,     UF32NEG                     )
UWASM_OP(  "f32.ceil",                     0x8d,   0x8d,    TY_AM64_R_R_R,     UF32CEIL                    )
UWASM_OP(  "f32.floor",                    0x8e,   0x8e,    TY_AM64_R_R_R,     UF32FLOOR                   )
UWASM_OP(  "f32.trunc",                    0x8f,   0x8f,    TY_AM64_R_R_R,     UF32TRUNC                   )
UWASM_OP(  "f32.nearest",                  0x90,   0x90,    TY_AM64_R_R_R,     UF32NEAREST                 )
UWASM_OP(  "f32.sqrt",                     0x91,   0x91,    TY_AM64_R_R_R,     UF32SQRT                    )
UWASM_OP(  "f32.add",                      0x92,   0x92,    TY_AM64_R_R_R,     UF32ADD                     )
UWASM_OP(  "f32.sub",                      0x93,   0x93,    TY_AM64_R_R_R,     UF32SUB                     )
UWASM_OP(  "f32.mul",                      0x94,   0x94,    TY_AM64_R_R_R,     UF32MUL                     )
UWASM_OP(  "f32.div",                      0x95,   0x95,    TY_AM64_R_R_R,     UF32DIV                     )
UWASM_OP(  "f32.min",                      0x96,   0x96,    TY_AM64_R_R_R,     UF32MIN                     )
UWASM_OP(  "f32.max",                      0x97,   0x97,    TY_AM64_R_R_R,     UF32MAX                     )
UWASM_OP(  "f32.copysign",                 0x98,   0x98,    TY_AM64_R_R_R,     UF32COPYSIGN                )
UWASM_OP(  "f64.abs",                      0x99,   0x99,    TY_AM64_R_R_R,     UF64ABS                     )
UWASM_OP(  "f64.neg",                      0x9a,   0x9a,    TY_AM64_R_R_R,     UF64NEG                     )
UWASM_OP(  "f64.ceil",                     0x9b,   0x9b,    TY_AM64_R_R_R,     UF64CEIL                    )
UWASM_OP(  "f64.floor",                    0x9c,   0x9c,    TY_AM64_R_R_R,     UF64FLOOR                   )
UWASM_OP(  "f64.trunc",                    0x9d,   0x9d,    TY_AM64_R_R_R,     UF64TRUNC                   )
UWASM_OP(  "f64.nearest",                  0x9e,   0x9e,    TY_AM64_R_R_R,     UF64NEAREST                 )
UWASM_OP(  "f64.sqrt",                     0x9f,   0x9f,    TY_AM64_R_R_R,     UF64SQRT                    )
UWASM_OP(  "f64.add",                      0xa0,   0xa0,    TY_AM64_R_R_R,     UF64ADD                     )
UWASM_OP(  "f64.sub",                      0xa1,   0xa1,    TY_AM64_R_R_R,     UF64SUB                     )
UWASM_OP(  "f64.mul",                      0xa2,   0xa2,    TY_AM64_R_R_R,     UF64MUL                     )
UWASM_OP(  "f64.div",                      0xa3,   0xa3,    TY_AM64_R_R_R,     UF64DIV                     )
UWASM_OP(  "f64.min",                      0xa4,   0xa4,    TY_AM64_R_R_R,     UF64MIN                     )
UWASM_OP(  "f64.max",                      0xa5,   0xa5,    TY_AM64_R_R_R,     UF64MAX                     )
UWASM_OP(  "f64.copysign",                 0xa6,   0xa6,    TY_AM64_R_R_R,     UF64COPYSIGN                )
UWASM_OP(  "i32.wrap_i64",                 0xa7,   0xa7,    TY_AM64_R_R_R,     UI32WRAP_I64                )
UWASM_OP(  "i32.trunc_f32_s",              0xa8,   0xa8,    TY_AM64_R_R_R,     UI32TRUNC_F32_S             )
UWASM_OP(  "i32.trunc_f32_u",              0xa9,   0xa9,    TY_AM64_R_R_R,     UI32TRUNC_F32_U             )
UWASM_OP(  "i32.trunc_f64_s",              0xaa,   0xaa,    TY_AM64_R_R_R,     UI32TRUNC_F64_S             )
UWASM_OP(  "i32.trunc_f64_u",              0xab,   0xab,    TY_AM64_R_R_R,     UI32TRUNC_F64_U             )
UWASM_OP(  "i64.extend_i32_s",             0xac,   0xac,    TY_AM64_R_R_R,     UI64EXTEND_I32_S            )
UWASM_OP(  "i64.extend_i32_u",             0xad,   0xad,    TY_AM64_R_R_R,     UI64EXTEND_I32_U            )
UWASM_OP(  "i64.trunc_f32_s",              0xae,   0xae,    TY_AM64_R_R_R,     UI64TRUNC_F32_S             )
UWASM_OP(  "i64.trunc_f32_u",              0xaf,   0xaf,    TY_AM64_R_R_R,     UI64TRUNC_F32_U             )
UWASM_OP(  "i64.trunc_f64_s",              0xb0,   0xb0,    TY_AM64_R_R_R,     UI64TRUNC_F64_S             )
UWASM_OP(  "i64.trunc_f64_u",              0xb1,   0xb1,    TY_AM64_R_R_R,     UI64TRUNC_F64_U             )
UWASM_OP(  "f32.convert_i32_s",            0xb2,   0xb2,    TY_AM64_R_R_R,     UF32CONVERT_I32_S           )
UWASM_OP(  "f32.convert_i32_u",            0xb3,   0xb3,    TY_AM64_R_R_R,     UF32CONVERT_I32_U           )
UWASM_OP(  "f32.convert_i64_s",            0xb4,   0xb4,    TY_AM64_R_R_R,     UF32CONVERT_I64_S           )
UWASM_OP(  "f32.convert_i64_u",            0xb5,   0xb5,    TY_AM64_R_R_R,     UF32CONVERT_I64_U           )
UWASM_OP(  "f32.demote_f64",               0xb6,   0xb6,    TY_AM64_R_R_R,     UF32DEMOTE_F64              )
UWASM_OP(  "f64.convert_i32_s",            0xb7,   0xb7,    TY_AM64_R_R_R,     UF64CONVERT_I32_S           )
UWASM_OP(  "f64.convert_i32_u",            0xb8,   0xb8,    TY_AM64_R_R_R,     UF64CONVERT_I32_U           )
UWASM_OP(  "f64.convert_i64_s",            0xb9,   0xb9,    TY_AM64_R_R_R,     UF64CONVERT_I64_S           )
UWASM_OP(  "f64.convert_i64_u",            0xba,   0xba,    TY_AM64_R_R_R,     UF64CONVERT_I64_U           )
UWASM_OP(  "f64.promote_f32",              0xbb,   0xbb,    TY_AM64_R_R_R,     UF64PROMOTE_F32             )
UWASM_OP(  "i32.reinterpret_f32",          0xbc,   0xbc,    TY_AM64_R_R_R,     UI32REINTERPRET_F32         )
UWASM_OP(  "i64.reinterpret_f64",          0xbd,   0xbd,    TY_AM64_R_R_R,     UI64REINTERPRET_F64         )
UWASM_OP(  "f32.reinterpret_i32",          0xbe,   0xbe,    TY_AM64_R_R_R,     UF32REINTERPRET_I32         )
UWASM_OP(  "f64.reinterpret_i64",          0xbf,   0xbf,    TY_AM64_R_R_R,     UF64REINTERPRET_I64         )
UWASM_OP(  "mov",                          0xc0,   0xc0,    TY_AM32_R_R,       UMOV                         )

/* unsupported inst */
#if 0
UWASM_OP(  "i32.extend8_s",                0xC0,   0xC0,    TY_AM64_R_R_R,     UI32EXTEND8_S               )
UWASM_OP(  "i32.extend16_s",               0xC1,   0xC1,    TY_AM64_R_R_R,     UI32EXTEND16_S              )
UWASM_OP(  "i64.extend8_s",                0xC2,   0xC2,    TY_AM64_R_R_R,     UI64EXTEND8_S               )
UWASM_OP(  "i64.extend16_s",               0xC3,   0xC3,    TY_AM64_R_R_R,     UI64EXTEND16_S              )
UWASM_OP(  "i64.extend32_s",               0xC4,   0xC4,    TY_AM64_R_R_R,     UI64EXTEND32_S              )
UWASM_OP(  "alloca",                       0xe0,   0xe0,    TY_AM64_R_R_R,     UALLOCA                     )
UWASM_OP(  "br_unless",                    0xe1,   0xe1,    TY_AM64_R_R_R,     UBR_UNLESS                  )
UWASM_OP(  "call_import",                  0xe2,   0xe2,    TY_AM64_R_R_R,     UCALL_IMPORT                )
UWASM_OP(  "data",                         0xe3,   0xe3,    TY_AM64_R_R_R,     UDATA                       )
UWASM_OP(  "drop_keep",                    0xe4,   0xe4,    TY_AM64_R_R_R,     UDROP_KEEP                  )
UWASM_OP(  "i32.trunc_sat_f32_s",          0x00,   0x00,    TY_AM64_R_R_R,     UI32TRUNC_SAT_F32_S         )
UWASM_OP(  "i32.trunc_sat_f32_u",          0x01,   0x01,    TY_AM64_R_R_R,     UI32TRUNC_SAT_F32_U         )
UWASM_OP(  "i32.trunc_sat_f64_s",          0x02,   0x02,    TY_AM64_R_R_R,     UI32TRUNC_SAT_F64_S         )
UWASM_OP(  "i32.trunc_sat_f64_u",          0x03,   0x03,    TY_AM64_R_R_R,     UI32TRUNC_SAT_F64_U         )
UWASM_OP(  "i64.trunc_sat_f32_s",          0x04,   0x04,    TY_AM64_R_R_R,     UI64TRUNC_SAT_F32_S         )
UWASM_OP(  "i64.trunc_sat_f32_u",          0x05,   0x05,    TY_AM64_R_R_R,     UI64TRUNC_SAT_F32_U         )
UWASM_OP(  "i64.trunc_sat_f64_s",          0x06,   0x06,    TY_AM64_R_R_R,     UI64TRUNC_SAT_F64_S         )
UWASM_OP(  "i64.trunc_sat_f64_u",          0x07,   0x07,    TY_AM64_R_R_R,     UI64TRUNC_SAT_F64_U         )
UWASM_OP(  "memory.init",                  0x08,   0x08,    TY_AM64_R_OFS,     UMEMORYINIT                 )
UWASM_OP(  "data.drop",                    0x09,   0x09,    TY_AM64_R_OFS,     UDATADROP                   )
UWASM_OP(  "memory.fill",                  0x0b,   0x0b,    TY_AM64_R_OFS,     UMEMORYFILL                 )
UWASM_OP(  "table.init",                   0x0c,   0x0c,    TY_AM64_R_OFS,     UTABLEINIT                  )
UWASM_OP(  "elem.drop",                    0x0d,   0x0d,    TY_AM64_R_OFS,     UELEMDROP                   )
UWASM_OP(  "table.copy",                   0x0e,   0x0e,    TY_AM64_R_OFS,     UTABLECOPY                  )
UWASM_OP(  "table.get",                    0x25,   0x25,    TY_AM64_R_OFS,     UTABLEGET                   )
UWASM_OP(  "table.set",                    0x26,   0x26,    TY_AM64_R_OFS,     UTABLESET                   )
UWASM_OP(  "table.grow",                   0x0f,   0x0f,    TY_AM64_R_OFS,     UTABLEGROW                  )
UWASM_OP(  "table.size",                   0x10,   0x10,    TY_AM64_R_OFS,     UTABLESIZE                  )
UWASM_OP(  "table.fill",                   0x11,   0x11,    TY_AM64_R_OFS,     UTABLEFILL                  )
UWASM_OP(  "ref.null",                     0xd0,   0xd0,    TY_AM64_R_OFS,     UREFNULL                    )
UWASM_OP(  "ref.is_null",                  0xd1,   0xd1,    TY_AM64_R_OFS,     UREFIS_NULL                 )
UWASM_OP(  "ref.func",                     0xd2,   0xd2,    TY_AM64_R_OFS,     UREFFUNC                    )
UWASM_OP(   "v128.load",                   0x00,   0x00,    TY_AM64_R_OFS,     UV128LOAD                   )
UWASM_OP(  "i16x8.load8x8_s",              0x01,   0x01,    TY_AM64_R_OFS,     UI16X8LOAD8X8_S             )
UWASM_OP(  "i16x8.load8x8_u",              0x02,   0x02,    TY_AM64_R_OFS,     UI16X8LOAD8X8_U             )
UWASM_OP(  "i32x4.load16x4_s",             0x03,   0x03,    TY_AM64_R_OFS,     UI32X4LOAD16X4_S            )
UWASM_OP(  "i32x4.load16x4_u",             0x04,   0x04,    TY_AM64_R_OFS,     UI32X4LOAD16X4_U            )
UWASM_OP(  "i64x2.load32x2_s",             0x05,   0x05,    TY_AM64_R_OFS,     UI64X2LOAD32X2_S            )
UWASM_OP(  "i64x2.load32x2_u",             0x06,   0x06,    TY_AM64_R_OFS,     UI64X2LOAD32X2_U            )
UWASM_OP(  "v8x16.load_splat",             0x07,   0x07,    TY_AM64_R_OFS,     UV8X16LOAD_SPLAT            )
UWASM_OP(  "v16x8.load_splat",             0x08,   0x08,    TY_AM64_R_OFS,     UV16X8LOAD_SPLAT            )
UWASM_OP(  "v32x4.load_splat",             0x09,   0x09,    TY_AM64_R_OFS,     UV32X4LOAD_SPLAT            )
UWASM_OP(  "v64x2.load_splat",             0x0a,   0x0a,    TY_AM64_R_OFS,     UV64X2LOAD_SPLAT            )
UWASM_OP(  "v128.store",                   0x0b,   0x0b,    TY_AM64_R_OFS,     UV128STORE                  )
UWASM_OP(  "v128.const",                   0x0c,   0x0c,    TY_AM64_R_OFS,     UV128CONST                  )
UWASM_OP(  "v8x16.shuffle",                0x0d,   0x0d,    TY_AM64_R_OFS,     UV8X16SHUFFLE               )
UWASM_OP(  "v8x16.swizzle",                0x0e,   0x0e,    TY_AM64_R_OFS,     UV8X16SWIZZLE               )
UWASM_OP(  "i8x16.splat",                  0x0f,   0x0f,    TY_AM64_R_OFS,     UI8X16SPLAT                 )
UWASM_OP(  "i16x8.splat",                  0x10,   0x10,    TY_AM64_R_OFS,     UI16X8SPLAT                 )
UWASM_OP(  "i32x4.splat",                  0x11,   0x11,    TY_AM64_R_OFS,     UI32X4SPLAT                 )
UWASM_OP(  "i64x2.splat",                  0x12,   0x12,    TY_AM64_R_OFS,     UI64X2SPLAT                 )
UWASM_OP(  "f32x4.splat",                  0x13,   0x13,    TY_AM64_R_OFS,     UF32X4SPLAT                 )
UWASM_OP(  "f64x2.splat",                  0x14,   0x14,    TY_AM64_R_OFS,     UF64X2SPLAT                 )
UWASM_OP(  "i8x16.extract_lane_s",         0x15,   0x15,    TY_AM64_R_OFS,     UI8X16EXTRACT_LANE_S        )
UWASM_OP(  "i8x16.extract_lane_u",         0x16,   0x16,    TY_AM64_R_OFS,     UI8X16EXTRACT_LANE_U        )
UWASM_OP(  "i8x16.replace_lane",           0x17,   0x17,    TY_AM64_R_OFS,     UI8X16REPLACE_LANE          )
UWASM_OP(  "i16x8.extract_lane_s",         0x18,   0x18,    TY_AM64_R_OFS,     UI16X8EXTRACT_LANE_S        )
UWASM_OP(  "i16x8.extract_lane_u",         0x19,   0x19,    TY_AM64_R_OFS,     UI16X8EXTRACT_LANE_U        )
UWASM_OP(  "i16x8.replace_lane",           0x1a,   0x1a,    TY_AM64_R_OFS,     UI16X8REPLACE_LANE          )
UWASM_OP(  "i32x4.extract_lane",           0x1b,   0x1b,    TY_AM64_R_OFS,     UI32X4EXTRACT_LANE          )
UWASM_OP(  "i32x4.replace_lane",           0x1c,   0x1c,    TY_AM64_R_OFS,     UI32X4REPLACE_LANE          )
UWASM_OP(  "i64x2.extract_lane",           0x1d,   0x1d,    TY_AM64_R_OFS,     UI64X2EXTRACT_LANE          )
UWASM_OP(  "i64x2.replace_lane",           0x1e,   0x1e,    TY_AM64_R_OFS,     UI64X2REPLACE_LANE          )
UWASM_OP(  "f32x4.extract_lane",           0x1f,   0x1f,    TY_AM64_R_OFS,     UF32X4EXTRACT_LANE          )
UWASM_OP(  "f32x4.replace_lane",           0x20,   0x20,    TY_AM64_R_OFS,     UF32X4REPLACE_LANE          )
UWASM_OP(  "f64x2.extract_lane",           0x21,   0x21,    TY_AM64_R_OFS,     UF64X2EXTRACT_LANE          )
UWASM_OP(  "f64x2.replace_lane",           0x22,   0x22,    TY_AM64_R_OFS,     UF64X2REPLACE_LANE          )
UWASM_OP(  "i8x16.eq",                     0x23,   0x23,    TY_AM64_R_OFS,     UI8X16EQ                    )
UWASM_OP(  "i8x16.ne",                     0x24,   0x24,    TY_AM64_R_OFS,     UI8X16NE                    )
UWASM_OP(  "i8x16.lt_s",                   0x25,   0x25,    TY_AM64_R_OFS,     UI8X16LT_S                  )
UWASM_OP(  "i8x16.lt_u",                   0x26,   0x26,    TY_AM64_R_OFS,     UI8X16LT_U                  )
UWASM_OP(  "i8x16.gt_s",                   0x27,   0x27,    TY_AM64_R_OFS,     UI8X16GT_S                  )
UWASM_OP(  "i8x16.gt_u",                   0x28,   0x28,    TY_AM64_R_OFS,     UI8X16GT_U                  )
UWASM_OP(  "i8x16.le_s",                   0x29,   0x29,    TY_AM64_R_OFS,     UI8X16LE_S                  )
UWASM_OP(  "i8x16.le_u",                   0x2a,   0x2a,    TY_AM64_R_OFS,     UI8X16LE_U                  )
UWASM_OP(  "i8x16.ge_s",                   0x2b,   0x2b,    TY_AM64_R_OFS,     UI8X16GE_S                  )
UWASM_OP(  "i8x16.ge_u",                   0x2c,   0x2c,    TY_AM64_R_OFS,     UI8X16GE_U                  )
UWASM_OP(  "i16x8.eq",                     0x2d,   0x2d,    TY_AM64_R_OFS,     UI16X8EQ                    )
UWASM_OP(  "i16x8.ne",                     0x2e,   0x2e,    TY_AM64_R_OFS,     UI16X8NE                    )
UWASM_OP(  "i16x8.lt_s",                   0x2f,   0x2f,    TY_AM64_R_OFS,     UI16X8LT_S                  )
UWASM_OP(  "i16x8.lt_u",                   0x30,   0x30,    TY_AM64_R_OFS,     UI16X8LT_U                  )
UWASM_OP(  "i16x8.gt_s",                   0x31,   0x31,    TY_AM64_R_OFS,     UI16X8GT_S                  )
UWASM_OP(  "i16x8.gt_u",                   0x32,   0x32,    TY_AM64_R_OFS,     UI16X8GT_U                  )
UWASM_OP(  "i16x8.le_s",                   0x33,   0x33,    TY_AM64_R_OFS,     UI16X8LE_S                  )
UWASM_OP(  "i16x8.le_u",                   0x34,   0x34,    TY_AM64_R_OFS,     UI16X8LE_U                  )
UWASM_OP(  "i16x8.ge_s",                   0x35,   0x35,    TY_AM64_R_OFS,     UI16X8GE_S                  )
UWASM_OP(  "i16x8.ge_u",                   0x36,   0x36,    TY_AM64_R_OFS,     UI16X8GE_U                  )
UWASM_OP(  "i32x4.eq",                     0x37,   0x37,    TY_AM64_R_OFS,     UI32X4EQ                    )
UWASM_OP(  "i32x4.ne",                     0x38,   0x38,    TY_AM64_R_OFS,     UI32X4NE                    )
UWASM_OP(  "i32x4.lt_s",                   0x39,   0x39,    TY_AM64_R_OFS,     UI32X4LT_S                  )
UWASM_OP(  "i32x4.lt_u",                   0x3a,   0x3a,    TY_AM64_R_OFS,     UI32X4LT_U                  )
UWASM_OP(  "i32x4.gt_s",                   0x3b,   0x3b,    TY_AM64_R_OFS,     UI32X4GT_S                  )
UWASM_OP(  "i32x4.gt_u",                   0x3c,   0x3c,    TY_AM64_R_OFS,     UI32X4GT_U                  )
UWASM_OP(  "i32x4.le_s",                   0x3d,   0x3d,    TY_AM64_R_OFS,     UI32X4LE_S                  )
UWASM_OP(  "i32x4.le_u",                   0x3e,   0x3e,    TY_AM64_R_OFS,     UI32X4LE_U                  )
UWASM_OP(  "i32x4.ge_s",                   0x3f,   0x3f,    TY_AM64_R_OFS,     UI32X4GE_S                  )
UWASM_OP(  "i32x4.ge_u",                   0x40,   0x40,    TY_AM64_R_OFS,     UI32X4GE_U                  )
UWASM_OP(  "f32x4.eq",                     0x41,   0x41,    TY_AM64_R_OFS,     UF32X4EQ                    )
UWASM_OP(  "f32x4.ne",                     0x42,   0x42,    TY_AM64_R_OFS,     UF32X4NE                    )
UWASM_OP(  "f32x4.lt",                     0x43,   0x43,    TY_AM64_R_OFS,     UF32X4LT                    )
UWASM_OP(  "f32x4.gt",                     0x44,   0x44,    TY_AM64_R_OFS,     UF32X4GT                    )
UWASM_OP(  "f32x4.le",                     0x45,   0x45,    TY_AM64_R_OFS,     UF32X4LE                    )
UWASM_OP(  "f32x4.ge",                     0x46,   0x46,    TY_AM64_R_OFS,     UF32X4GE                    )
UWASM_OP(  "f64x2.eq",                     0x47,   0x47,    TY_AM64_R_OFS,     UF64X2EQ                    )
UWASM_OP(  "f64x2.ne",                     0x48,   0x48,    TY_AM64_R_OFS,     UF64X2NE                    )
UWASM_OP(  "f64x2.lt",                     0x49,   0x49,    TY_AM64_R_OFS,     UF64X2LT                    )
UWASM_OP(  "f64x2.gt",                     0x4a,   0x4a,    TY_AM64_R_OFS,     UF64X2GT                    )
UWASM_OP(  "f64x2.le",                     0x4b,   0x4b,    TY_AM64_R_OFS,     UF64X2LE                    )
UWASM_OP(  "f64x2.ge",                     0x4c,   0x4c,    TY_AM64_R_OFS,     UF64X2GE                    )
UWASM_OP(  "v128.not",                     0x4d,   0x4d,    TY_AM64_R_OFS,     UV128NOT                    )
UWASM_OP(  "v128.and",                     0x4e,   0x4e,    TY_AM64_R_OFS,     UV128AND                    )
UWASM_OP(  "v128.andnot",                  0x4f,   0x4f,    TY_AM64_R_OFS,     UV128ANDNOT                 )
UWASM_OP(   "v128.or",                     0x50,   0x50,    TY_AM64_R_OFS,     UV128OR                     )
UWASM_OP(  "v128.xor",                     0x51,   0x51,    TY_AM64_R_OFS,     UV128XOR                    )
UWASM_OP(  "v128.bitselect",               0x52,   0x52,    TY_AM64_R_OFS,     UV128BITSELECT              )
UWASM_OP(  "i8x16.abs",                    0x60,   0x60,    TY_AM64_R_OFS,     UI8X16ABS                   )
UWASM_OP(  "i8x16.neg",                    0x61,   0x61,    TY_AM64_R_OFS,     UI8X16NEG                   )
UWASM_OP(  "i8x16.any_true",               0x62,   0x62,    TY_AM64_R_OFS,     UI8X16ANY_TRUE              )
UWASM_OP(  "i8x16.all_true",               0x63,   0x63,    TY_AM64_R_OFS,     UI8X16ALL_TRUE              )
UWASM_OP(  "i8x16.narrow_i16x8_s",         0x65,   0x65,    TY_AM64_R_OFS,     UI8X16NARROW_I16X8_S        )
UWASM_OP(  "i8x16.narrow_i16x8_u",         0x66,   0x66,    TY_AM64_R_OFS,     UI8X16NARROW_I16X8_U        )
UWASM_OP(  "i8x16.shl",                    0x6b,   0x6b,    TY_AM64_R_OFS,     UI8X16SHL                   )
UWASM_OP(  "i8x16.shr_s",                  0x6c,   0x6c,    TY_AM64_R_OFS,     UI8X16SHR_S                 )
UWASM_OP(  "i8x16.shr_u",                  0x6d,   0x6d,    TY_AM64_R_OFS,     UI8X16SHR_U                 )
UWASM_OP(  "i8x16.add",                    0x6e,   0x6e,    TY_AM64_R_OFS,     UI8X16ADD                   )
UWASM_OP(  "i8x16.add_saturate_s",         0x6f,   0x6f,    TY_AM64_R_OFS,     UI8X16ADD_SATURATE_S        )
UWASM_OP(  "i8x16.add_saturate_u",         0x70,   0x70,    TY_AM64_R_OFS,     UI8X16ADD_SATURATE_U        )
UWASM_OP(  "i8x16.sub",                    0x71,   0x71,    TY_AM64_R_OFS,     UI8X16SUB                   )
UWASM_OP(  "i8x16.sub_saturate_s",         0x72,   0x72,    TY_AM64_R_OFS,     UI8X16SUB_SATURATE_S        )
UWASM_OP(  "i8x16.sub_saturate_u",         0x73,   0x73,    TY_AM64_R_OFS,     UI8X16SUB_SATURATE_U        )
UWASM_OP(  "i8x16.min_s",                  0x76,   0x76,    TY_AM64_R_OFS,     UI8X16MIN_S                 )
UWASM_OP(  "i8x16.min_u",                  0x77,   0x77,    TY_AM64_R_OFS,     UI8X16MIN_U                 )
UWASM_OP(  "i8x16.max_s",                  0x78,   0x78,    TY_AM64_R_OFS,     UI8X16MAX_S                 )
UWASM_OP(  "i8x16.max_u",                  0x79,   0x79,    TY_AM64_R_OFS,     UI8X16MAX_U                 )
UWASM_OP(  "i8x16.avgr_u",                 0x7b,   0x7b,    TY_AM64_R_OFS,     UI8X16AVGR_U                )
UWASM_OP(  "i16x8.abs",                    0x80,   0x80,    TY_AM64_R_OFS,     UI16X8ABS                   )
UWASM_OP(  "i16x8.neg",                    0x81,   0x81,    TY_AM64_R_OFS,     UI16X8NEG                   )
UWASM_OP(  "i16x8.any_true",               0x82,   0x82,    TY_AM64_R_OFS,     UI16X8ANY_TRUE              )
UWASM_OP(  "i16x8.all_true",               0x83,   0x83,    TY_AM64_R_OFS,     UI16X8ALL_TRUE              )
UWASM_OP(  "i16x8.narrow_i32x4_s",         0x85,   0x85,    TY_AM64_R_OFS,     UI16X8NARROW_I32X4_S        )
UWASM_OP(  "i16x8.narrow_i32x4_u",         0x86,   0x86,    TY_AM64_R_OFS,     UI16X8NARROW_I32X4_U        )
UWASM_OP(  "i16x8.widen_low_i8x16_s",      0x87,   0x87,    TY_AM64_R_OFS,     UI16X8WIDEN_LOW_I8X16_S     )
UWASM_OP(  "i16x8.widen_high_i8x16_s",     0x88,   0x88,    TY_AM64_R_OFS,     UI16X8WIDEN_HIGH_I8X16_S    )
UWASM_OP(  "i16x8.widen_low_i8x16_u",      0x89,   0x89,    TY_AM64_R_OFS,     UI16X8WIDEN_LOW_I8X16_U     )
UWASM_OP(  "i16x8.widen_high_i8x16_u",     0x8a,   0x8a,    TY_AM64_R_OFS,     UI16X8WIDEN_HIGH_I8X16_U    )
UWASM_OP(  "i16x8.shl",                    0x8b,   0x8b,    TY_AM64_R_OFS,     UI16X8SHL                   )
UWASM_OP(  "i16x8.shr_s",                  0x8c,   0x8c,    TY_AM64_R_OFS,     UI16X8SHR_S                 )
UWASM_OP(  "i16x8.shr_u",                  0x8d,   0x8d,    TY_AM64_R_OFS,     UI16X8SHR_U                 )
UWASM_OP(  "i16x8.add",                    0x8e,   0x8e,    TY_AM64_R_OFS,     UI16X8ADD                   )
UWASM_OP(  "i16x8.add_saturate_s",         0x8f,   0x8f,    TY_AM64_R_OFS,     UI16X8ADD_SATURATE_S        )
UWASM_OP(  "i16x8.add_saturate_u",         0x90,   0x90,    TY_AM64_R_OFS,     UI16X8ADD_SATURATE_U        )
UWASM_OP(  "i16x8.sub",                    0x91,   0x91,    TY_AM64_R_OFS,     UI16X8SUB                   )
UWASM_OP(  "i16x8.sub_saturate_s",         0x92,   0x92,    TY_AM64_R_OFS,     UI16X8SUB_SATURATE_S        )
UWASM_OP(  "i16x8.sub_saturate_u",         0x93,   0x93,    TY_AM64_R_OFS,     UI16X8SUB_SATURATE_U        )
UWASM_OP(  "i16x8.mul",                    0x95,   0x95,    TY_AM64_R_OFS,     UI16X8MUL                   )
UWASM_OP(  "i16x8.min_s",                  0x96,   0x96,    TY_AM64_R_OFS,     UI16X8MIN_S                 )
UWASM_OP(  "i16x8.min_u",                  0x97,   0x97,    TY_AM64_R_OFS,     UI16X8MIN_U                 )
UWASM_OP(  "i16x8.max_s",                  0x98,   0x98,    TY_AM64_R_OFS,     UI16X8MAX_S                 )
UWASM_OP(  "i16x8.max_u",                  0x99,   0x99,    TY_AM64_R_OFS,     UI16X8MAX_U                 )
UWASM_OP(  "i16x8.avgr_u",                 0x9b,   0x9b,    TY_AM64_R_OFS,     UI16X8AVGR_U                )
UWASM_OP(  "i32x4.abs",                    0xa0,   0xa0,    TY_AM64_R_OFS,     UI32X4ABS                   )
UWASM_OP(  "i32x4.neg",                    0xa1,   0xa1,    TY_AM64_R_OFS,     UI32X4NEG                   )
UWASM_OP(  "i32x4.any_true",               0xa2,   0xa2,    TY_AM64_R_OFS,     UI32X4ANY_TRUE              )
UWASM_OP(  "i32x4.all_true",               0xa3,   0xa3,    TY_AM64_R_OFS,     UI32X4ALL_TRUE              )
UWASM_OP(  "i32x4.widen_low_i16x8_s",      0xa7,   0xa7,    TY_AM64_R_OFS,     UI32X4WIDEN_LOW_I16X8_S     )
UWASM_OP(  "i32x4.widen_high_i16x8_s",     0xa8,   0xa8,    TY_AM64_R_OFS,     UI32X4WIDEN_HIGH_I16X8_S    )
UWASM_OP(  "i32x4.widen_low_i16x8_u",      0xa9,   0xa9,    TY_AM64_R_OFS,     UI32X4WIDEN_LOW_I16X8_U     )
UWASM_OP(  "i32x4.widen_high_i16x8_u",     0xaa,   0xaa,    TY_AM64_R_OFS,     UI32X4WIDEN_HIGH_I16X8_U    )
UWASM_OP(  "i32x4.shl",                    0xab,   0xab,    TY_AM64_R_OFS,     UI32X4SHL                   )
UWASM_OP(  "i32x4.shr_s",                  0xac,   0xac,    TY_AM64_R_OFS,     UI32X4SHR_S                 )
UWASM_OP(  "i32x4.shr_u",                  0xad,   0xad,    TY_AM64_R_OFS,     UI32X4SHR_U                 )
UWASM_OP(  "i32x4.add",                    0xae,   0xae,    TY_AM64_R_OFS,     UI32X4ADD                   )
UWASM_OP(  "i32x4.sub",                    0xb1,   0xb1,    TY_AM64_R_OFS,     UI32X4SUB                   )
UWASM_OP(  "i32x4.mul",                    0xb5,   0xb5,    TY_AM64_R_OFS,     UI32X4MUL                   )
UWASM_OP(  "i64.atomic.rmw8.xor_u",        0x3e,   0x3e,    TY_AM64_R_OFS,     UI64ATOMIC.RMW8.XOR_U       )
UWASM_OP(  "i64.atomic.rmw16.xor_u",       0x3f,   0x3f,    TY_AM64_R_OFS,     UI64ATOMIC.RMW16.XOR_U      )
UWASM_OP(  "i64.atomic.rmw32.xor_u",       0x40,   0x40,    TY_AM64_R_OFS,     UI64ATOMIC.RMW32.XOR_U      )
UWASM_OP(  "i32.atomic.rmw.xchg",          0x41,   0x41,    TY_AM64_R_OFS,     UI32ATOMIC.RMW.XCHG         )
UWASM_OP(  "i64.atomic.rmw.xchg",          0x42,   0x42,    TY_AM64_R_OFS,     UI64ATOMIC.RMW.XCHG         )
UWASM_OP(  "i32.atomic.rmw8.xchg_u",       0x43,   0x43,    TY_AM64_R_OFS,     UI32ATOMIC.RMW8.XCHG_U      )
UWASM_OP(  "i32.atomic.rmw16.xchg_u",      0x44,   0x44,    TY_AM64_R_OFS,     UI32ATOMIC.RMW16.XCHG_U     )
UWASM_OP(  "i64.atomic.rmw8.xchg_u",       0x45,   0x45,    TY_AM64_R_OFS,     UI64ATOMIC.RMW8.XCHG_U      )
UWASM_OP(  "i64.atomic.rmw16.xchg_u",      0x46,   0x46,    TY_AM64_R_OFS,     UI64ATOMIC.RMW16.XCHG_U     )
UWASM_OP(  "i64.atomic.rmw32.xchg_u",      0x47,   0x47,    TY_AM64_R_OFS,     UI64ATOMIC.RMW32.XCHG_U     )
UWASM_OP(  "i32.atomic.rmw.cmpxchg",       0x48,   0x48,    TY_AM64_R_OFS,     UI32ATOMIC.RMW.CMPXCHG      )
UWASM_OP(  "i64.atomic.rmw.cmpxchg",       0x49,   0x49,    TY_AM64_R_OFS,     UI64ATOMIC.RMW.CMPXCHG      )
UWASM_OP(  "i32.atomic.rmw8.cmpxchg_u",    0x4a,   0x4a,    TY_AM64_R_OFS,     UI32ATOMIC.RMW8.CMPXCHG_U   )
UWASM_OP(  "i32.atomic.rmw16.cmpxchg_u",   0x4b,   0x4b,    TY_AM64_R_OFS,     UI32ATOMIC.RMW16.CMPXCHG_U  )
UWASM_OP(  "i64.atomic.rmw8.cmpxchg_u",    0x4c,   0x4c,    TY_AM64_R_OFS,     UI64ATOMIC.RMW8.CMPXCHG_U   )
UWASM_OP(  "i64.atomic.rmw16.cmpxchg_u",   0x4d,   0x4d,    TY_AM64_R_OFS,     UI64ATOMIC.RMW16.CMPXCHG_U  )
UWASM_OP(  "i64.atomic.rmw32.cmpxchg_u",   0x4e,   0x4e,    TY_AM64_R_OFS,     UI64ATOMIC.RMW32.CMPXCHG_U  )
#endif