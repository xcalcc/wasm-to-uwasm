//
// Created by xc5 on 2020/7/19.
//

//      tr    st1   st2   st3   im_t1 im_t2 class        count_n
WASM_OP(___,  ___,  ___,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x00, Unreachable, "unreachable", "")
WASM_OP(___,  ___,  ___,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x01, Nop, "nop", "")
WASM_OP(___,  ___,  ___,  ___,  I32,  ___,  INST_CLASS_CONST, 1, 0,  0x02, Block, "block", "")
WASM_OP(___,  ___,  ___,  ___,  I32,  ___,  INST_CLASS_CONST, 1, 0,  0x03, Loop, "loop", "")
WASM_OP(___,  ___,  ___,  ___,  I32,  ___,  INST_CLASS_CONST, 1, 0,  0x04, If, "if", "")
WASM_OP(___,  ___,  ___,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x05, Else, "else", "")
WASM_OP(___,  ___,  ___,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x06, Try, "try", "")
WASM_OP(___,  ___,  ___,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x07, Catch, "catch", "")
WASM_OP(___,  ___,  ___,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x08, Throw, "throw", "")
WASM_OP(___,  ___,  ___,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x09, Rethrow, "rethrow", "")
WASM_OP(___,  ___,  ___,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x0a, BrOnExn, "br_on_exn", "")
WASM_OP(___,  ___,  ___,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x0b, End, "end", "")
WASM_OP(___,  ___,  ___,  ___,  I32,  ___,  INST_CLASS_CONST, 1, 0,  0x0c, Br, "br", "")
WASM_OP(___,  I32,  ___,  ___,  I32,  ___,  INST_CLASS_CONST, 1, 0,  0x0d, BrIf, "br_if", "")
WASM_OP(___,  I32,  ___,  ___,  I32,  I32,  INST_CLASS_CONST, 2, 0,  0x0e, BrTable, "br_table", "")
WASM_OP(___,  ___,  ___,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x0f, Return, "return", "")
WASM_OP(___,  ___,  ___,  ___,  I32,  ___,  INST_CLASS_CONST, 1, 0,  0x10, Call, "call", "")
WASM_OP(___,  ___,  ___,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x11, CallIndirect, "call_indirect", "")
WASM_OP(___,  ___,  ___,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x12, ReturnCall, "return_call", "")
WASM_OP(___,  ___,  ___,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x13, ReturnCallIndirect, "return_call_indirect", "")
WASM_OP(___,  ___,  ___,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x1a, Drop, "drop", "")
WASM_OP(___,  ___,  ___,  I32,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x1b, Select, "select", "")
WASM_OP(___,  ___,  ___,  I32,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x1c, SelectT, "select", "")
WASM_OP(___,  ___,  ___,  ___,  I32,  ___,  INST_CLASS_CONST, 1, 0,  0x20, LocalGet, "local.get", "")
WASM_OP(___,  ___,  ___,  ___,  I32,  ___,  INST_CLASS_CONST, 1, 0,  0x21, LocalSet, "local.set", "")
WASM_OP(___,  ___,  ___,  ___,  I32,  ___,  INST_CLASS_CONST, 1, 0,  0x22, LocalTee, "local.tee", "")
WASM_OP(___,  ___,  ___,  ___,  I32,  ___,  INST_CLASS_CONST, 1, 0,  0x23, GlobalGet, "global.get", "")
WASM_OP(___,  ___,  ___,  ___,  I32,  ___,  INST_CLASS_CONST, 1, 0,  0x24, GlobalSet, "global.set", "")
WASM_OP(I32,  I32,  ___,  ___,  I32,  I32,  INST_CLASS_CONST, 2, 4,  0x28, I32Load, "i32.load", "")
WASM_OP(I64,  I32,  ___,  ___,  I32,  I32,  INST_CLASS_CONST, 2, 8,  0x29, I64Load, "i64.load", "")
WASM_OP(F32,  I32,  ___,  ___,  I32,  I32,  INST_CLASS_CONST, 2, 4,  0x2a, F32Load, "f32.load", "")
WASM_OP(F64,  I32,  ___,  ___,  I32,  I32,  INST_CLASS_CONST, 2, 8,  0x2b, F64Load, "f64.load", "")
WASM_OP(I32,  I32,  ___,  ___,  I32,  I32,  INST_CLASS_CONST, 2, 1,  0x2c, I32Load8S, "i32.load8_s", "")
WASM_OP(I32,  I32,  ___,  ___,  I32,  I32,  INST_CLASS_CONST, 2, 1,  0x2d, I32Load8U, "i32.load8_u", "")
WASM_OP(I32,  I32,  ___,  ___,  I32,  I32,  INST_CLASS_CONST, 2, 2,  0x2e, I32Load16S, "i32.load16_s", "")
WASM_OP(I32,  I32,  ___,  ___,  I32,  I32,  INST_CLASS_CONST, 2, 2,  0x2f, I32Load16U, "i32.load16_u", "")
WASM_OP(I64,  I32,  ___,  ___,  I32,  I32,  INST_CLASS_CONST, 2, 1,  0x30, I64Load8S, "i64.load8_s", "")
WASM_OP(I64,  I32,  ___,  ___,  I32,  I32,  INST_CLASS_CONST, 2, 1,  0x31, I64Load8U, "i64.load8_u", "")
WASM_OP(I64,  I32,  ___,  ___,  I32,  I32,  INST_CLASS_CONST, 2, 2,  0x32, I64Load16S, "i64.load16_s", "")
WASM_OP(I64,  I32,  ___,  ___,  I32,  I32,  INST_CLASS_CONST, 2, 2,  0x33, I64Load16U, "i64.load16_u", "")
WASM_OP(I64,  I32,  ___,  ___,  I32,  I32,  INST_CLASS_CONST, 2, 4,  0x34, I64Load32S, "i64.load32_s", "")
WASM_OP(I64,  I32,  ___,  ___,  I32,  I32,  INST_CLASS_CONST, 2, 4,  0x35, I64Load32U, "i64.load32_u", "")
WASM_OP(___,  I32,  I32,  ___,  I32,  I32,  INST_CLASS_CONST, 2, 4,  0x36, I32Store, "i32.store", "")
WASM_OP(___,  I32,  I64,  ___,  I32,  I32,  INST_CLASS_CONST, 2, 8,  0x37, I64Store, "i64.store", "")
WASM_OP(___,  I32,  F32,  ___,  I32,  I32,  INST_CLASS_CONST, 2, 4,  0x38, F32Store, "f32.store", "")
WASM_OP(___,  I32,  F64,  ___,  I32,  I32,  INST_CLASS_CONST, 2, 8,  0x39, F64Store, "f64.store", "")
WASM_OP(___,  I32,  I32,  ___,  I32,  I32,  INST_CLASS_CONST, 2, 1,  0x3a, I32Store8, "i32.store8", "")
WASM_OP(___,  I32,  I32,  ___,  I32,  I32,  INST_CLASS_CONST, 2, 2,  0x3b, I32Store16, "i32.store16", "")
WASM_OP(___,  I32,  I64,  ___,  I32,  I32,  INST_CLASS_CONST, 2, 1,  0x3c, I64Store8, "i64.store8", "")
WASM_OP(___,  I32,  I64,  ___,  I32,  I32,  INST_CLASS_CONST, 2, 2,  0x3d, I64Store16, "i64.store16", "")
WASM_OP(___,  I32,  I64,  ___,  I32,  I32,  INST_CLASS_CONST, 2, 4,  0x3e, I64Store32, "i64.store32", "")
WASM_OP(I32,  ___,  ___,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x3f, MemorySize, "memory.size", "")
WASM_OP(I32,  I32,  ___,  ___,  I32,  ___,  INST_CLASS_CONST, 1, 0,  0x40, MemoryGrow, "memory.grow", "")
WASM_OP(I32,  ___,  ___,  ___,  I32,  ___,  INST_CLASS_CONST, 1, 0,  0x41, I32Const, "i32.const", "")
WASM_OP(I64,  ___,  ___,  ___,  I64,  ___,  INST_CLASS_CONST, 1, 0,  0x42, I64Const, "i64.const", "")
WASM_OP(F32,  ___,  ___,  ___,  F32,  ___,  INST_CLASS_CONST, 1, 0,  0x43, F32Const, "f32.const", "")
WASM_OP(F64,  ___,  ___,  ___,  F64,  ___,  INST_CLASS_CONST, 1, 0,  0x44, F64Const, "f64.const", "")
WASM_OP(I32,  I32,  ___,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x45, I32Eqz, "i32.eqz", "eqz")
WASM_OP(I32,  I32,  I32,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x46, I32Eq, "i32.eq", "==")
WASM_OP(I32,  I32,  I32,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x47, I32Ne, "i32.ne", "!=")
WASM_OP(I32,  I32,  I32,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x48, I32LtS, "i32.lt_s", "<")
WASM_OP(I32,  I32,  I32,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x49, I32LtU, "i32.lt_u", "<")
WASM_OP(I32,  I32,  I32,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x4a, I32GtS, "i32.gt_s", ">")
WASM_OP(I32,  I32,  I32,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x4b, I32GtU, "i32.gt_u", ">")
WASM_OP(I32,  I32,  I32,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x4c, I32LeS, "i32.le_s", "<=")
WASM_OP(I32,  I32,  I32,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x4d, I32LeU, "i32.le_u", "<=")
WASM_OP(I32,  I32,  I32,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x4e, I32GeS, "i32.ge_s", ">=")
WASM_OP(I32,  I32,  I32,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x4f, I32GeU, "i32.ge_u", ">=")
WASM_OP(I32,  I64,  ___,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x50, I64Eqz, "i64.eqz", "eqz")
WASM_OP(I32,  I64,  I64,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x51, I64Eq, "i64.eq", "==")
WASM_OP(I32,  I64,  I64,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x52, I64Ne, "i64.ne", "!=")
WASM_OP(I32,  I64,  I64,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x53, I64LtS, "i64.lt_s", "<")
WASM_OP(I32,  I64,  I64,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x54, I64LtU, "i64.lt_u", "<")
WASM_OP(I32,  I64,  I64,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x55, I64GtS, "i64.gt_s", ">")
WASM_OP(I32,  I64,  I64,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x56, I64GtU, "i64.gt_u", ">")
WASM_OP(I32,  I64,  I64,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x57, I64LeS, "i64.le_s", "<=")
WASM_OP(I32,  I64,  I64,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x58, I64LeU, "i64.le_u", "<=")
WASM_OP(I32,  I64,  I64,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x59, I64GeS, "i64.ge_s", ">=")
WASM_OP(I32,  I64,  I64,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x5a, I64GeU, "i64.ge_u", ">=")
WASM_OP(I32,  F32,  F32,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x5b, F32Eq, "f32.eq", "==")
WASM_OP(I32,  F32,  F32,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x5c, F32Ne, "f32.ne", "!=")
WASM_OP(I32,  F32,  F32,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x5d, F32Lt, "f32.lt", "<")
WASM_OP(I32,  F32,  F32,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x5e, F32Gt, "f32.gt", ">")
WASM_OP(I32,  F32,  F32,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x5f, F32Le, "f32.le", "<=")
WASM_OP(I32,  F32,  F32,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x60, F32Ge, "f32.ge", ">=")
WASM_OP(I32,  F64,  F64,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x61, F64Eq, "f64.eq", "==")
WASM_OP(I32,  F64,  F64,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x62, F64Ne, "f64.ne", "!=")
WASM_OP(I32,  F64,  F64,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x63, F64Lt, "f64.lt", "<")
WASM_OP(I32,  F64,  F64,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x64, F64Gt, "f64.gt", ">")
WASM_OP(I32,  F64,  F64,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x65, F64Le, "f64.le", "<=")
WASM_OP(I32,  F64,  F64,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x66, F64Ge, "f64.ge", ">=")
WASM_OP(I32,  I32,  ___,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x67, I32Clz, "i32.clz", "clz")
WASM_OP(I32,  I32,  ___,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x68, I32Ctz, "i32.ctz", "ctz")
WASM_OP(I32,  I32,  ___,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x69, I32Popcnt, "i32.popcnt", "popcnt")
WASM_OP(I32,  I32,  I32,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x6a, I32Add, "i32.add", "+")
WASM_OP(I32,  I32,  I32,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x6b, I32Sub, "i32.sub", "-")
WASM_OP(I32,  I32,  I32,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x6c, I32Mul, "i32.mul", "*")
WASM_OP(I32,  I32,  I32,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x6d, I32DivS, "i32.div_s", "/")
WASM_OP(I32,  I32,  I32,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x6e, I32DivU, "i32.div_u", "/")
WASM_OP(I32,  I32,  I32,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x6f, I32RemS, "i32.rem_s", "%")
WASM_OP(I32,  I32,  I32,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x70, I32RemU, "i32.rem_u", "%")
WASM_OP(I32,  I32,  I32,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x71, I32And, "i32.and", "&")
WASM_OP(I32,  I32,  I32,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x72, I32Or, "i32.or", "|")
WASM_OP(I32,  I32,  I32,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x73, I32Xor, "i32.xor", "^")
WASM_OP(I32,  I32,  I32,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x74, I32Shl, "i32.shl", "<<")
WASM_OP(I32,  I32,  I32,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x75, I32ShrS, "i32.shr_s", ">>")
WASM_OP(I32,  I32,  I32,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x76, I32ShrU, "i32.shr_u", ">>")
WASM_OP(I32,  I32,  I32,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x77, I32Rotl, "i32.rotl", "<<")
WASM_OP(I32,  I32,  I32,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x78, I32Rotr, "i32.rotr", ">>")
WASM_OP(I64,  I64,  ___,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x79, I64Clz, "i64.clz", "clz")
WASM_OP(I64,  I64,  ___,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x7a, I64Ctz, "i64.ctz", "ctz")
WASM_OP(I64,  I64,  ___,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x7b, I64Popcnt, "i64.popcnt", "popcnt")
WASM_OP(I64,  I64,  I64,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x7c, I64Add, "i64.add", "+")
WASM_OP(I64,  I64,  I64,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x7d, I64Sub, "i64.sub", "-")
WASM_OP(I64,  I64,  I64,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x7e, I64Mul, "i64.mul", "*")
WASM_OP(I64,  I64,  I64,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x7f, I64DivS, "i64.div_s", "/")
WASM_OP(I64,  I64,  I64,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x80, I64DivU, "i64.div_u", "/")
WASM_OP(I64,  I64,  I64,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x81, I64RemS, "i64.rem_s", "%")
WASM_OP(I64,  I64,  I64,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x82, I64RemU, "i64.rem_u", "%")
WASM_OP(I64,  I64,  I64,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x83, I64And, "i64.and", "&")
WASM_OP(I64,  I64,  I64,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x84, I64Or, "i64.or", "|")
WASM_OP(I64,  I64,  I64,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x85, I64Xor, "i64.xor", "^")
WASM_OP(I64,  I64,  I64,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x86, I64Shl, "i64.shl", "<<")
WASM_OP(I64,  I64,  I64,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x87, I64ShrS, "i64.shr_s", ">>")
WASM_OP(I64,  I64,  I64,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x88, I64ShrU, "i64.shr_u", ">>")
WASM_OP(I64,  I64,  I64,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x89, I64Rotl, "i64.rotl", "<<")
WASM_OP(I64,  I64,  I64,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x8a, I64Rotr, "i64.rotr", ">>")
WASM_OP(F32,  F32,  F32,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x8b, F32Abs, "f32.abs", "abs")
WASM_OP(F32,  F32,  F32,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x8c, F32Neg, "f32.neg", "-")
WASM_OP(F32,  F32,  F32,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x8d, F32Ceil, "f32.ceil", "ceil")
WASM_OP(F32,  F32,  F32,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x8e, F32Floor, "f32.floor", "floor")
WASM_OP(F32,  F32,  F32,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x8f, F32Trunc, "f32.trunc", "trunc")
WASM_OP(F32,  F32,  F32,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x90, F32Nearest, "f32.nearest", "nearest")
WASM_OP(F32,  F32,  F32,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x91, F32Sqrt, "f32.sqrt", "sqrt")
WASM_OP(F32,  F32,  F32,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x92, F32Add, "f32.add", "+")
WASM_OP(F32,  F32,  F32,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x93, F32Sub, "f32.sub", "-")
WASM_OP(F32,  F32,  F32,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x94, F32Mul, "f32.mul", "*")
WASM_OP(F32,  F32,  F32,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x95, F32Div, "f32.div", "/")
WASM_OP(F32,  F32,  F32,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x96, F32Min, "f32.min", "min")
WASM_OP(F32,  F32,  F32,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x97, F32Max, "f32.max", "max")
WASM_OP(F32,  F32,  F32,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x98, F32Copysign, "f32.copysign", "copysign")
WASM_OP(F64,  F64,  F64,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x99, F64Abs, "f64.abs", "abs")
WASM_OP(F64,  F64,  F64,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x9a, F64Neg, "f64.neg", "-")
WASM_OP(F64,  F64,  F64,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x9b, F64Ceil, "f64.ceil", "ceil")
WASM_OP(F64,  F64,  F64,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x9c, F64Floor, "f64.floor", "floor")
WASM_OP(F64,  F64,  F64,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x9d, F64Trunc, "f64.trunc", "trunc")
WASM_OP(F64,  F64,  F64,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x9e, F64Nearest, "f64.nearest", "nearest")
WASM_OP(F64,  F64,  F64,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0x9f, F64Sqrt, "f64.sqrt", "sqrt")
WASM_OP(F64,  F64,  F64,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0xa0, F64Add, "f64.add", "+")
WASM_OP(F64,  F64,  F64,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0xa1, F64Sub, "f64.sub", "-")
WASM_OP(F64,  F64,  F64,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0xa2, F64Mul, "f64.mul", "*")
WASM_OP(F64,  F64,  F64,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0xa3, F64Div, "f64.div", "/")
WASM_OP(F64,  F64,  F64,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0xa4, F64Min, "f64.min", "min")
WASM_OP(F64,  F64,  F64,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0xa5, F64Max, "f64.max", "max")
WASM_OP(F64,  F64,  F64,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0xa6, F64Copysign, "f64.copysign", "copysign")
WASM_OP(I32,  I64,  ___,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0xa7, I32WrapI64, "i32.wrap_i64", "")
WASM_OP(I32,  F32,  ___,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0xa8, I32TruncF32S, "i32.trunc_f32_s", "")
WASM_OP(I32,  F32,  ___,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0xa9, I32TruncF32U, "i32.trunc_f32_u", "")
WASM_OP(I32,  F64,  ___,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0xaa, I32TruncF64S, "i32.trunc_f64_s", "")
WASM_OP(I32,  F64,  ___,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0xab, I32TruncF64U, "i32.trunc_f64_u", "")
WASM_OP(I64,  I32,  ___,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0xac, I64ExtendI32S, "i64.extend_i32_s", "")
WASM_OP(I64,  I32,  ___,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0xad, I64ExtendI32U, "i64.extend_i32_u", "")
WASM_OP(I64,  F32,  ___,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0xae, I64TruncF32S, "i64.trunc_f32_s", "")
WASM_OP(I64,  F32,  ___,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0xaf, I64TruncF32U, "i64.trunc_f32_u", "")
WASM_OP(I64,  F64,  ___,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0xb0, I64TruncF64S, "i64.trunc_f64_s", "")
WASM_OP(I64,  F64,  ___,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0xb1, I64TruncF64U, "i64.trunc_f64_u", "")
WASM_OP(F32,  I32,  ___,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0xb2, F32ConvertI32S, "f32.convert_i32_s", "")
WASM_OP(F32,  I32,  ___,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0xb3, F32ConvertI32U, "f32.convert_i32_u", "")
WASM_OP(F32,  I64,  ___,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0xb4, F32ConvertI64S, "f32.convert_i64_s", "")
WASM_OP(F32,  I64,  ___,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0xb5, F32ConvertI64U, "f32.convert_i64_u", "")
WASM_OP(F32,  F64,  ___,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0xb6, F32DemoteF64, "f32.demote_f64", "")
WASM_OP(F64,  I32,  ___,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0xb7, F64ConvertI32S, "f64.convert_i32_s", "")
WASM_OP(F64,  I32,  ___,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0xb8, F64ConvertI32U, "f64.convert_i32_u", "")
WASM_OP(F64,  I64,  ___,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0xb9, F64ConvertI64S, "f64.convert_i64_s", "")
WASM_OP(F64,  I64,  ___,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0xba, F64ConvertI64U, "f64.convert_i64_u", "")
WASM_OP(F64,  F32,  ___,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0xbb, F64PromoteF32, "f64.promote_f32", "")
WASM_OP(I32,  F32,  ___,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0xbc, I32ReinterpretF32, "i32.reinterpret_f32", "")
WASM_OP(I64,  F64,  ___,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0xbd, I64ReinterpretF64, "i64.reinterpret_f64", "")
WASM_OP(F32,  I32,  ___,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0xbe, F32ReinterpretI32, "f32.reinterpret_i32", "")
WASM_OP(F64,  I64,  ___,  ___,  ___,  ___,  INST_CLASS_CONST, 0, 0,  0xbf, F64ReinterpretI64, "f64.reinterpret_i64", "")
